<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorkflowPlatform.Domain</name>
    </assembly>
    <members>
        <member name="T:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus">
            <summary>
            Represents the current execution status of a workflow instance.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Pending">
            <summary>
            Workflow execution is queued but has not started yet.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Running">
            <summary>
            Workflow execution is currently in progress.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Completed">
            <summary>
            Workflow execution has completed successfully.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Failed">
            <summary>
            Workflow execution has failed due to an error.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Cancelled">
            <summary>
            Workflow execution was cancelled by a user or system.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Paused">
            <summary>
            Workflow execution has been paused and can be resumed.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.TimedOut">
            <summary>
            Workflow execution timed out and was terminated.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowExecutionStatus.Waiting">
            <summary>
            Workflow execution is waiting for external input or approval.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus">
            <summary>
            Represents the execution status of an individual node within a workflow.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Pending">
            <summary>
            Node has not been processed yet.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Running">
            <summary>
            Node is currently being processed.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Completed">
            <summary>
            Node has completed successfully.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Failed">
            <summary>
            Node execution failed.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Skipped">
            <summary>
            Node execution was skipped due to conditional logic.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Retrying">
            <summary>
            Node is waiting for retry after a transient failure.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.NodeExecutionStatus.Cancelled">
            <summary>
            Node execution was cancelled.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority">
            <summary>
            Represents the priority level for workflow execution.
            Higher priority workflows are executed before lower priority ones.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority.Low">
            <summary>
            Low priority - executed when system resources are available.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority.Normal">
            <summary>
            Normal priority - standard execution queue.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority.High">
            <summary>
            High priority - executed before normal priority workflows.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority.Critical">
            <summary>
            Critical priority - executed immediately with dedicated resources.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus">
            <summary>
            Represents the publication status of a workflow definition.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus.Draft">
            <summary>
            Workflow is in draft state and not available for execution.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus.Active">
            <summary>
            Workflow is active and available for execution.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus.Inactive">
            <summary>
            Workflow is inactive and temporarily disabled.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus.Archived">
            <summary>
            Workflow has been archived and is read-only.
            </summary>
        </member>
        <member name="F:WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus.Deprecated">
            <summary>
            Workflow has been deprecated and should not be used for new executions.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Exceptions.DomainException">
            <summary>
            Base class for all domain-specific exceptions in the workflow platform.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Exceptions.DomainException.ErrorCode">
            <summary>
            The error code associated with this domain exception.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Exceptions.DomainException.Context">
            <summary>
            Additional contextual data related to the exception.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Exceptions.DomainException.WithContext(System.String,System.Object)">
            <summary>
            Adds contextual information to the exception.
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
            <returns>This exception instance for method chaining</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Exceptions.BusinessRuleValidationException">
            <summary>
            Exception thrown when a business rule is violated in the domain.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Exceptions.EntityNotFoundException">
            <summary>
            Exception thrown when an entity is not found in the domain.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Exceptions.EntityAlreadyExistsException">
            <summary>
            Exception thrown when attempting to create an entity that already exists.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Exceptions.InvalidWorkflowStateException">
            <summary>
            Exception thrown when a workflow execution fails due to invalid state.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2">
            <summary>
            Represents a generic repository pattern interface for aggregate roots.
            Provides basic CRUD operations with async support.
            This interface belongs in the Domain layer as it defines the contract
            that the domain needs for persistence operations.
            </summary>
            <typeparam name="TAggregate">The aggregate root type</typeparam>
            <typeparam name="TId">The identifier type</typeparam>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Gets an aggregate by its unique identifier.
            </summary>
            <param name="id">The aggregate identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The aggregate if found, null otherwise</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new aggregate to the repository.
            </summary>
            <param name="aggregate">The aggregate to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The added aggregate</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing aggregate in the repository.
            </summary>
            <param name="aggregate">The aggregate to update</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated aggregate</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an aggregate from the repository.
            </summary>
            <param name="aggregate">The aggregate to remove</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.ExistsAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Checks if an aggregate exists with the specified identifier.
            </summary>
            <param name="id">The aggregate identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if the aggregate exists, false otherwise</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Interfaces.IRepository`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all pending changes to the underlying data store.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The number of state entries written to the data store</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1">
            <summary>
            Base class for aggregate roots in the domain model.
            Implements event sourcing pattern and domain event management.
            </summary>
            <typeparam name="TId">The type of the aggregate identifier</typeparam>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.#ctor(`0,System.Guid)">
            <summary>
            Initializes a new instance of the AggregateRoot class.
            </summary>
            <param name="id">The aggregate identifier</param>
            <param name="createdBy">The user who created the aggregate</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.#ctor">
            <summary>
            Initializes a new instance of the AggregateRoot class.
            Used by EF Core for materialization.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.DomainEvents">
            <summary>
            Gets the domain events that have occurred within this aggregate.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.RaiseDomainEvent(WorkflowPlatform.Domain.Common.Primitives.IDomainEvent)">
            <summary>
            Adds a domain event to the aggregate.
            </summary>
            <param name="domainEvent">The domain event to add</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.ClearDomainEvents">
            <summary>
            Clears all domain events from the aggregate.
            This should be called after events have been processed.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.AggregateRoot`1.UpdateAggregate(System.Guid,WorkflowPlatform.Domain.Common.Primitives.IDomainEvent)">
            <summary>
            Updates the modification audit fields and raises a domain event if specified.
            </summary>
            <param name="modifiedBy">The user who modified the aggregate</param>
            <param name="domainEvent">Optional domain event to raise</param>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Primitives.DomainEvent">
            <summary>
            Base class for all domain events.
            Provides common properties and functionality for domain events.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.Id">
            <summary>
            Gets the unique identifier of the domain event.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.OccurredOn">
            <summary>
            Gets the date and time when the event occurred.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.EventType">
            <summary>
            Gets the type name of the event for serialization purposes.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.AggregateId">
            <summary>
            Gets the aggregate identifier that this event relates to.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.AggregateVersion">
            <summary>
            Gets the version of the aggregate when this event occurred.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.DomainEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DomainEvent class.
            </summary>
            <param name="aggregateVersion">The version of the aggregate when the event occurred</param>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Primitives.Entity`1">
            <summary>
            Base class for all domain entities.
            Provides identity equality and audit fields.
            </summary>
            <typeparam name="TId">The type of the entity identifier</typeparam>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.Id">
            <summary>
            Gets or sets the unique identifier of the entity.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.CreatedBy">
            <summary>
            Gets the user who created this entity.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.CreatedAt">
            <summary>
            Gets the date and time when the entity was created.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.ModifiedBy">
            <summary>
            Gets the user who last modified this entity.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.ModifiedAt">
            <summary>
            Gets the date and time when the entity was last modified.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.Entity`1.Version">
            <summary>
            Gets the version for optimistic concurrency control.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.#ctor(`0,System.Guid)">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
            <param name="id">The entity identifier</param>
            <param name="createdBy">The user who created the entity</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.#ctor">
            <summary>
            Initializes a new instance of the Entity class.
            Used by EF Core for materialization.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.UpdateModified(System.Guid)">
            <summary>
            Updates the modification audit fields.
            </summary>
            <param name="modifiedBy">The user who modified the entity</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.Equals(WorkflowPlatform.Domain.Common.Primitives.Entity{`0})">
            <summary>
            Determines whether the specified entity is equal to the current entity.
            </summary>
            <param name="other">The entity to compare with the current entity</param>
            <returns>True if the specified entity is equal to the current entity; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current entity.
            </summary>
            <param name="obj">The object to compare with the current entity</param>
            <returns>True if the specified object is equal to the current entity; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.GetHashCode">
            <summary>
            Returns the hash code for the current entity.
            </summary>
            <returns>A hash code for the current entity</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.op_Equality(WorkflowPlatform.Domain.Common.Primitives.Entity{`0},WorkflowPlatform.Domain.Common.Primitives.Entity{`0})">
            <summary>
            Determines whether two entities are equal.
            </summary>
            <param name="left">The first entity to compare</param>
            <param name="right">The second entity to compare</param>
            <returns>True if the entities are equal; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.Entity`1.op_Inequality(WorkflowPlatform.Domain.Common.Primitives.Entity{`0},WorkflowPlatform.Domain.Common.Primitives.Entity{`0})">
            <summary>
            Determines whether two entities are not equal.
            </summary>
            <param name="left">The first entity to compare</param>
            <param name="right">The second entity to compare</param>
            <returns>True if the entities are not equal; otherwise, false</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Primitives.IDomainEvent">
            <summary>
            Represents a domain event that has occurred within the domain.
            Domain events are used to communicate between aggregates and bounded contexts.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.IDomainEvent.Id">
            <summary>
            Gets the unique identifier of the domain event.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.IDomainEvent.OccurredOn">
            <summary>
            Gets the date and time when the event occurred.
            </summary>
        </member>
        <member name="P:WorkflowPlatform.Domain.Common.Primitives.IDomainEvent.EventType">
            <summary>
            Gets the type name of the event for serialization purposes.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Common.Primitives.ValueObject">
            <summary>
            Base class for value objects in the domain model.
            Value objects are immutable and compared by their structural equality.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.GetAtomicValues">
            <summary>
            Gets the atomic values that comprise this value object.
            Used for equality comparisons and hash code generation.
            </summary>
            <returns>An enumerable of the atomic values</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.Equals(WorkflowPlatform.Domain.Common.Primitives.ValueObject)">
            <summary>
            Determines whether the specified value object is equal to the current value object.
            </summary>
            <param name="other">The value object to compare with the current value object</param>
            <returns>True if the specified value object is equal to the current value object; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current value object.
            </summary>
            <param name="obj">The object to compare with the current value object</param>
            <returns>True if the specified object is equal to the current value object; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.GetHashCode">
            <summary>
            Returns the hash code for the current value object.
            </summary>
            <returns>A hash code for the current value object</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.op_Equality(WorkflowPlatform.Domain.Common.Primitives.ValueObject,WorkflowPlatform.Domain.Common.Primitives.ValueObject)">
            <summary>
            Determines whether two value objects are equal.
            </summary>
            <param name="left">The first value object to compare</param>
            <param name="right">The second value object to compare</param>
            <returns>True if the value objects are equal; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.op_Inequality(WorkflowPlatform.Domain.Common.Primitives.ValueObject,WorkflowPlatform.Domain.Common.Primitives.ValueObject)">
            <summary>
            Determines whether two value objects are not equal.
            </summary>
            <param name="left">The first value object to compare</param>
            <param name="right">The second value object to compare</param>
            <returns>True if the value objects are not equal; otherwise, false</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Common.Primitives.ValueObject.Copy">
            <summary>
            Creates a copy of the value object.
            Since value objects are immutable, this returns the same instance.
            </summary>
            <returns>The same instance of the value object</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate">
            <summary>
            Aggregate root representing a complete workflow definition.
            Encapsulates all nodes, connections, and business rules for workflow execution.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.Create(System.Guid,System.String,System.String,System.Guid,System.String,WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority,System.Nullable{System.TimeSpan},System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new workflow with the specified name and description.
            </summary>
            <param name="id">The unique identifier for the workflow</param>
            <param name="name">The workflow name</param>
            <param name="description">The workflow description</param>
            <param name="createdBy">The user creating the workflow</param>
            <param name="category">The workflow category (optional, defaults to "General")</param>
            <param name="priority">The workflow priority (optional, defaults to Normal)</param>
            <param name="defaultTimeout">The default timeout for workflow execution</param>
            <param name="maxConcurrentExecutions">Maximum concurrent executions allowed</param>
            <param name="isTemplate">Whether this workflow is a template</param>
            <param name="globalVariables">Global variables for the workflow</param>
            <returns>A new WorkflowAggregate instance</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.UpdateInfo(System.String,System.String,System.String,WorkflowPlatform.Domain.Common.Enumerations.WorkflowPriority,System.Guid)">
            <summary>
            Updates the workflow's basic information.
            </summary>
            <param name="name">The new workflow name</param>
            <param name="description">The new workflow description</param>
            <param name="category">The new workflow category</param>
            <param name="priority">The new workflow priority</param>
            <param name="updatedBy">The user making the update</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.AddNode(WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration,System.Double,System.Double,System.Guid,System.String)">
            <summary>
            Adds a new node to the workflow.
            </summary>
            <param name="nodeConfiguration">The configuration for the new node</param>
            <param name="positionX">The X position on the canvas</param>
            <param name="positionY">The Y position on the canvas</param>
            <param name="createdBy">The user adding the node</param>
            <param name="displayName">Optional display name for the node</param>
            <returns>The created workflow node</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.RemoveNode(System.Guid,System.Guid)">
            <summary>
            Removes a node from the workflow and all its connections.
            </summary>
            <param name="nodeId">The ID of the node to remove</param>
            <param name="updatedBy">The user removing the node</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.AddConnection(WorkflowPlatform.Domain.Workflows.ValueObjects.WorkflowConnection,System.Guid)">
            <summary>
            Adds a connection between two nodes in the workflow.
            </summary>
            <param name="connection">The connection to add</param>
            <param name="updatedBy">The user adding the connection</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.RemoveConnection(System.Guid,System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Removes a connection between nodes.
            </summary>
            <param name="sourceNodeId">The source node ID</param>
            <param name="targetNodeId">The target node ID</param>
            <param name="sourcePort">The source port</param>
            <param name="targetPort">The target port</param>
            <param name="updatedBy">The user removing the connection</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.ChangeStatus(WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus,System.Guid)">
            <summary>
            Changes the workflow status with appropriate validation.
            </summary>
            <param name="newStatus">The new status to set</param>
            <param name="changedBy">The user changing the status</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.ValidateForExecution">
            <summary>
            Validates the workflow for execution readiness.
            </summary>
            <returns>A list of validation errors, empty if validation passes</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.RecordExecution(System.DateTime)">
            <summary>
            Records that the workflow has been executed.
            </summary>
            <param name="executionTime">The time when execution started</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Aggregates.WorkflowAggregate.SetGlobalVariables(System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
            <summary>
            Sets global variables for the workflow.
            </summary>
            <param name="variables">The global variables to set</param>
            <param name="updatedBy">The user updating the variables</param>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode">
            <summary>
            Entity representing a single node in a workflow definition.
            Each node encapsulates a specific operation or task within the workflow.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.Create(System.Guid,WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration,System.Double,System.Double,System.Guid,System.String)">
            <summary>
            Creates a new workflow node with the specified configuration and position.
            </summary>
            <param name="workflowId">The ID of the workflow this node belongs to</param>
            <param name="configuration">The node configuration defining its behavior</param>
            <param name="displayName">The display name for the node (optional, uses config name if not provided)</param>
            <param name="positionX">The X coordinate position on the workflow canvas</param>
            <param name="positionY">The Y coordinate position on the workflow canvas</param>
            <param name="createdBy">The user ID who created this node</param>
            <returns>A new WorkflowNode instance</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.UpdateConfiguration(WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration,System.Guid,System.String)">
            <summary>
            Updates the node's configuration and display name.
            </summary>
            <param name="configuration">The new node configuration</param>
            <param name="displayName">The new display name (optional)</param>
            <param name="updatedBy">The user making the update</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.UpdatePosition(System.Double,System.Double,System.Guid)">
            <summary>
            Updates the node's position on the workflow canvas.
            </summary>
            <param name="positionX">The new X coordinate</param>
            <param name="positionY">The new Y coordinate</param>
            <param name="updatedBy">The user making the update</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.SetEnabled(System.Boolean,System.Guid)">
            <summary>
            Enables or disables the node for execution.
            </summary>
            <param name="isEnabled">Whether the node should be enabled</param>
            <param name="updatedBy">The user making the change</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.SetRuntimeContext(System.String,System.Object)">
            <summary>
            Adds runtime context data to the node.
            This data is used during workflow execution and is not persisted with the definition.
            </summary>
            <param name="key">The context key</param>
            <param name="value">The context value</param>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.GetRuntimeContext``1(System.String,``0)">
            <summary>
            Gets a runtime context value.
            </summary>
            <typeparam name="T">The expected type of the context value</typeparam>
            <param name="key">The context key</param>
            <param name="defaultValue">The default value if the key doesn't exist</param>
            <returns>The context value or default value</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.Validate">
            <summary>
            Validates the node configuration and connections.
            </summary>
            <returns>A list of validation errors, empty if validation passes</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.CanExecute(System.Collections.Generic.ISet{System.Guid})">
            <summary>
            Determines if this node can execute based on its incoming connections and their states.
            </summary>
            <param name="completedNodes">The set of nodes that have completed successfully</param>
            <returns>True if the node can execute, false otherwise</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Entities.WorkflowNode.GetRequiredPropertiesForNodeType(System.String)">
            <summary>
            Gets the required properties for a specific node type.
            This would typically be loaded from a configuration or registry.
            </summary>
            <param name="nodeType">The type of node</param>
            <returns>List of required property names</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Events.WorkflowCreatedEvent">
            <summary>
            Domain event raised when a new workflow definition is created.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Events.WorkflowCreatedEvent.#ctor(System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Domain event raised when a new workflow definition is created.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Events.WorkflowUpdatedEvent">
            <summary>
            Domain event raised when a workflow definition is updated.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Events.WorkflowUpdatedEvent.#ctor(System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Domain event raised when a workflow definition is updated.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Events.WorkflowStatusChangedEvent">
            <summary>
            Domain event raised when a workflow status changes.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Events.WorkflowStatusChangedEvent.#ctor(System.Guid,WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus,WorkflowPlatform.Domain.Common.Enumerations.WorkflowStatus,System.Guid)">
            <summary>
            Domain event raised when a workflow status changes.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Events.WorkflowPublishedEvent">
            <summary>
            Domain event raised when a workflow is published.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Events.WorkflowPublishedEvent.#ctor(System.Guid,System.String,System.Guid)">
            <summary>
            Domain event raised when a workflow is published.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.Events.WorkflowArchivedEvent">
            <summary>
            Domain event raised when a workflow is archived.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.Events.WorkflowArchivedEvent.#ctor(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            Domain event raised when a workflow is archived.
            </summary>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration">
            <summary>
            Value object representing the configuration for a workflow node.
            Contains all the settings and parameters needed for node execution.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration.Create(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.TimeSpan},System.Int32,System.Boolean)">
            <summary>
            Creates a new node configuration with validation.
            </summary>
            <param name="nodeType">The type of node (e.g., HttpRequest, DatabaseQuery)</param>
            <param name="name">The display name for the node</param>
            <param name="description">Optional description of what the node does</param>
            <param name="properties">Node-specific configuration properties</param>
            <param name="metadata">Additional metadata for the node</param>
            <param name="timeout">Optional timeout for node execution</param>
            <param name="maxRetryAttempts">Maximum number of retry attempts (default: 3)</param>
            <param name="continueOnFailure">Whether to continue workflow execution if this node fails</param>
            <returns>A new NodeConfiguration instance</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration.GetProperty``1(System.String,``0)">
            <summary>
            Gets a strongly-typed property value from the node configuration.
            </summary>
            <typeparam name="T">The expected type of the property</typeparam>
            <param name="key">The property key</param>
            <param name="defaultValue">The default value to return if the property doesn't exist</param>
            <returns>The property value or the default value</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration.HasProperty(System.String)">
            <summary>
            Checks if a required property exists in the configuration.
            </summary>
            <param name="key">The property key to check</param>
            <returns>True if the property exists, false otherwise</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.NodeConfiguration.Validate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates the configuration against the node type requirements.
            </summary>
            <param name="requiredProperties">List of required property keys</param>
            <returns>A list of validation errors, empty if validation passes</returns>
        </member>
        <member name="T:WorkflowPlatform.Domain.Workflows.ValueObjects.WorkflowConnection">
            <summary>
            Value object representing a connection between two workflow nodes.
            Defines the flow of data and control between nodes in a workflow.
            </summary>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.WorkflowConnection.Create(System.Guid,System.Guid,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new workflow connection between two nodes.
            </summary>
            <param name="sourceNodeId">The ID of the source node</param>
            <param name="targetNodeId">The ID of the target node</param>
            <param name="sourcePort">The output port of the source node (default: "output")</param>
            <param name="targetPort">The input port of the target node (default: "input")</param>
            <param name="condition">Optional condition that must be met for data to flow</param>
            <param name="dataMapping">Optional data transformation mapping</param>
            <returns>A new WorkflowConnection instance</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.WorkflowConnection.ShouldFollow(System.Object)">
            <summary>
            Determines if this connection should be followed based on the condition and source data.
            </summary>
            <param name="sourceData">The output data from the source node</param>
            <returns>True if the connection should be followed, false otherwise</returns>
        </member>
        <member name="M:WorkflowPlatform.Domain.Workflows.ValueObjects.WorkflowConnection.TransformData(System.Object)">
            <summary>
            Transforms the source data according to the data mapping configuration.
            </summary>
            <param name="sourceData">The data to transform</param>
            <returns>The transformed data</returns>
        </member>
    </members>
</doc>
