version: '3.8'

# WorkflowPlatform Development Environment
# This docker-compose file sets up all required services for local development

networks:
  workflow-platform:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: workflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: WorkflowPlatformDev
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_dev_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflow_user -d WorkflowPlatformDev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: workflow-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password_change_me} --appendonly yes
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: workflow-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: workflow_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-secure_rabbit_password_change_me}
      RABBITMQ_DEFAULT_VHOST: workflow_dev
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: workflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.13
    depends_on:
      - workflow-api

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: workflow-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-secure_grafana_password_change_me}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"  # Using 3001 to avoid conflict with frontend
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.14
    depends_on:
      - prometheus

  # WorkflowPlatform API (Backend)
  workflow-api:
    build:
      context: .
      dockerfile: src/WorkflowPlatform.API/Dockerfile
      target: runtime
    container_name: workflow-api
    restart: unless-stopped
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=WorkflowPlatformDev;Username=workflow_user;Password=${POSTGRES_PASSWORD:-secure_dev_password_change_me};Port=5432"
      ConnectionStrings__Redis: "redis:6379,password=${REDIS_PASSWORD:-secure_redis_password_change_me}"
      ConnectionStrings__RabbitMQ: "amqp://workflow_user:${RABBITMQ_PASSWORD:-secure_rabbit_password_change_me}@rabbitmq:5672/workflow_dev"
      Jwt__Secret: "${JWT_SECRET:-dev-jwt-secret-key-minimum-256-bits-for-development-use-only-change-me}"
      Jwt__Issuer: "WorkflowPlatform-Development"
      Jwt__Audience: "WorkflowPlatform-Development-Users"
      Jwt__ExpirationHours: "24"
      Logging__LogLevel__Default: "Information"
      Logging__LogLevel__Microsoft: "Warning"
      Logging__LogLevel__WorkflowPlatform: "Debug"
    ports:
      - "5000:8080"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.20
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  # Frontend Development (Optional - can run locally with npm)
  workflow-frontend:
    image: node:18-alpine
    container_name: workflow-frontend
    restart: unless-stopped
    working_dir: /app
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXT_PUBLIC_WS_URL: ws://localhost:5000
    volumes:
      - ./workflow-platform-frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.21
    command: sh -c "npm install && npm run dev"
    depends_on:
      - workflow-api

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: workflow-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # Jaeger agent
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.15

  # Elasticsearch (Optional - for advanced logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: workflow-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./docker/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.16
    profiles:
      - logging

  # Kibana (Optional - for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: workflow-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.17
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # pgAdmin (Optional - Database Management)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: workflow-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@workflowplatform.dev
      PGADMIN_DEFAULT_PASSWORD: dev_pgadmin_password_2024!
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    networks:
      workflow-platform:
        ipv4_address: 172.20.0.18
    depends_on:
      - postgres
    profiles:
      - admin
