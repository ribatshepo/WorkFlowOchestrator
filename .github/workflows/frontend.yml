name: Frontend CI/CD

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
        description: 'Container registry URL'
      image-name:
        required: true
        type: string
        description: 'Base image name'
    outputs:
      image-tag:
        description: 'Built image tag'
        value: ${{ jobs.build-and-push.outputs.image-tag }}
      image-digest:
        description: 'Built image digest'
        value: ${{ jobs.build-and-push.outputs.image-digest }}

env:
  NODE_VERSION: '18.x'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./workflow-platform-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: workflow-platform-frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    defaults:
      run:
        working-directory: ./workflow-platform-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: workflow-platform-frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./workflow-platform-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: ./workflow-platform-frontend/test-results

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: ./workflow-platform-frontend/coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        working-directory: ./workflow-platform-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: workflow-platform-frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend services
        run: |
          cd ../
          docker-compose up -d postgres redis workflow-api
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: ./workflow-platform-frontend/test-results

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: ./workflow-platform-frontend/test-results/screenshots

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}}-{{date 'YYYY-MM-DD-HH-mm-ss'}}
          labels: |
            org.opencontainers.image.title=WorkflowPlatform Frontend
            org.opencontainers.image.description=Workflow Orchestration Platform Frontend
            org.opencontainers.image.vendor=WorkflowPlatform Team
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./workflow-platform-frontend
          file: ./workflow-platform-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            NEXT_PUBLIC_API_URL=/api

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ inputs.registry }}/${{ inputs.image-name }}/frontend:${{ github.sha }}
          format: spdx-json
          output-file: frontend-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-frontend
          path: frontend-sbom.spdx.json

      - name: Sign image with cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ inputs.registry }}/${{ inputs.image-name }}/frontend@${{ steps.build.outputs.digest }}

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start application
        run: |
          cd workflow-platform-frontend
          npm ci
          npm run build
          npm run start &
          sleep 30

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: ./.lighthouseci
