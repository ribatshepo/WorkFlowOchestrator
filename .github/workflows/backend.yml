name: Backend CI/CD

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
        description: 'Container registry URL'
      image-name:
        required: true
        type: string
        description: 'Base image name'
    outputs:
      image-tag:
        description: 'Built image tag'
        value: ${{ jobs.build-and-push.outputs.image-tag }}
      image-digest:
        description: 'Built image digest'
        value: ${{ jobs.build-and-push.outputs.image-digest }}

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore WorkflowPlatform.sln

      - name: Format check
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Build solution
        run: dotnet build WorkflowPlatform.sln --no-restore --configuration Release --verbosity normal

      - name: Security scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config: |
            name: "WorkflowPlatform Security Scan"
            disable-default-queries: false
            queries:
              - uses: security-and-quality

      - name: CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore WorkflowPlatform.sln

      - name: Run unit tests
        run: |
          dotnet test WorkflowPlatform.sln \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results \
            --settings coverlet.runsettings

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: './test-results/**/*.xml'
          targetdir: './coverage-report'
          reporttypes: 'Html;Cobertura;SonarQube'

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-report/Cobertura.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./test-results

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: workflow_user
          POSTGRES_DB: workflow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore WorkflowPlatform.sln

      - name: Build solution
        run: dotnet build WorkflowPlatform.sln --no-restore --configuration Release

      - name: Run integration tests
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=workflow_test;Username=workflow_user;Password=test_password;Port=5432"
          ConnectionStrings__Redis: "localhost:6379"
        run: |
          dotnet test tests/**/*Integration.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory ./integration-test-results

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: ./integration-test-results

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}}-{{date 'YYYY-MM-DD-HH-mm-ss'}}
          labels: |
            org.opencontainers.image.title=WorkflowPlatform API
            org.opencontainers.image.description=Workflow Orchestration Platform API
            org.opencontainers.image.vendor=WorkflowPlatform Team
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./WorkflowPlatform.API/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ inputs.registry }}/${{ inputs.image-name }}/api:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-backend
          path: sbom.spdx.json

      - name: Sign image with cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ inputs.registry }}/${{ inputs.image-name }}/api@${{ steps.build.outputs.digest }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run performance tests
        run: |
          # Performance tests will be implemented in subsequent tasks
          echo "ðŸš€ Performance tests placeholder"
          echo "API Response Time: <200ms target"
          echo "Concurrent Users: 10,000+ target"
          echo "Memory Usage: <2GB target"

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: ./performance-results
