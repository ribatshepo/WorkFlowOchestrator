version: '3.8'

# Docker Compose override for production deployment
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-production-data:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "work_mem=4MB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "random_page_cost=1.1",
      "-c", "temp_file_limit=2GB",
      "-c", "log_min_duration_statement=200ms",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "log_lock_waits=on"
    ]

  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-production-data:/data

  rabbitmq:
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq-production-data:/var/lib/rabbitmq

  workflow-api:
    image: ${REGISTRY}/${IMAGE_NAME}/api:${API_IMAGE_TAG}
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: ${DATABASE_CONNECTION_STRING}
      ConnectionStrings__Redis: ${REDIS_CONNECTION_STRING}
      ConnectionStrings__RabbitMQ: ${RABBITMQ_CONNECTION_STRING}
      Jwt__Secret: ${JWT_SECRET}
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Logging__LogLevel__Default: "Warning"
      Logging__LogLevel__WorkflowPlatform: "Information"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Remove development-only services in production
  workflow-frontend:
    profiles:
      - dev-only

  pgadmin:
    profiles:
      - admin

  elasticsearch:
    profiles:
      - logging

  kibana:
    profiles:
      - logging

volumes:
  postgres-production-data:
    driver: local
  redis-production-data:
    driver: local
  rabbitmq-production-data:
    driver: local
